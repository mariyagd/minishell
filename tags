!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
APPEND	minishell.h	/^# define APPEND	/;"	d
BLU	minishell.h	/^# define BLU /;"	d
BLU_2	minishell.h	/^# define BLU_2 /;"	d
BUFFER_SIZE	libft/includes/get_next_line.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC			= gcc$/;"	m
CC	libft/Makefile	/^CC		= gcc$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
COLOR_END	Makefile	/^COLOR_END 	= \\033[0m$/;"	m
COLOR_END	libft/Makefile	/^COLOR_END = \\033[0m$/;"	m
CYN	minishell.h	/^# define CYN /;"	d
DELETE	minishell.h	/^# define DELETE	/;"	d
DOLLAR	minishell.h	/^# define DOLLAR	/;"	d
ERROR_EXIT	minishell.h	/^# define ERROR_EXIT	/;"	d
EXPAND	minishell.h	/^# define EXPAND	/;"	d
EXPANDED	minishell.h	/^# define EXPANDED	/;"	d
FT_PRINTF_H	libft/includes/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
GET_NEXT_LINE_H	libft/includes/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
GREEN	Makefile	/^GREEN 		= \\033[32;6m$/;"	m
GREEN	libft/Makefile	/^GREEN = \\033[32;6m$/;"	m
GRN	minishell.h	/^# define GRN /;"	d
HEADERS	Makefile	/^HEADERS		= minishell.h$/;"	m
HERE_DOC	minishell.h	/^# define HERE_DOC	/;"	d
KEY_WORD	minishell.h	/^# define KEY_WORD	/;"	d
LIBFT	Makefile	/^LIBFT		= -L.\/libft -lft$/;"	m
LIBFT_FOLD	Makefile	/^LIBFT_FOLD	= libft$/;"	m
LIBFT_H	libft/includes/libft.h	/^# define LIBFT_H$/;"	d
L_CHEVRON	minishell.h	/^# define L_CHEVRON	/;"	d
MAG	minishell.h	/^# define MAG /;"	d
MAGNETA	Makefile	/^MAGNETA		:= $(shell tput setaf 5)$/;"	m
MINISHELL_H	minishell.h	/^# define MINISHELL_H$/;"	d
NAME	Makefile	/^NAME		= minishell$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
OBJS	Makefile	/^OBJS		= ${SRCS:.c=.o}$/;"	m
OBJS	libft/Makefile	/^OBJS =  ${SRCS_LIBFT:.c=.o} ${SRCS_LSTCHAINE:.c=.o} ${SRCS_PRINTF:.c=.o} ${SRCS_GNL:.c=.o} \\$/;"	m
PIPELINE	minishell.h	/^# define PIPELINE	/;"	d
QUESTION	minishell.h	/^# define QUESTION	/;"	d
READLINE	Makefile	/^READLINE	=  -L$(HOME)\/.brew\/opt\/readline\/lib -lreadline$/;"	m
READLINE	Makefile	/^READLINE	= -L\/opt\/homebrew\/Cellar\/readline\/8.2.1\/lib -lreadline$/;"	m
READLINE	Makefile	/^READLINE 	= -L\/opt\/homebrew\/opt\/readline\/lib -lreadline$/;"	m
RED	minishell.h	/^# define RED /;"	d
RESET	Makefile	/^RESET		:= $(shell tput sgr0)$/;"	m
RESET	minishell.h	/^# define RESET /;"	d
RM	Makefile	/^RM			= rm -f$/;"	m
RM	libft/Makefile	/^RM		= rm -f$/;"	m
R_CHEVRON	minishell.h	/^# define R_CHEVRON	/;"	d
SANITIZE	Makefile	/^SANITIZE	?= 0$/;"	m
SRCS	Makefile	/^SRCS		= main.c \\$/;"	m
SRCS_GNL	libft/Makefile	/^SRCS_GNL = 			get_next_line\/get_next_line.c \\$/;"	m
SRCS_LIBFT	libft/Makefile	/^SRCS_LIBFT = 		libft\/ft_memset.c \\$/;"	m
SRCS_LSTCHAINE	libft/Makefile	/^SRCS_LSTCHAINE = 	libft\/ft_lstnew.c \\$/;"	m
SRCS_PRINTF	libft/Makefile	/^SRCS_PRINTF = 		ft_printf\/ft_printf.c \\$/;"	m
WHT	minishell.h	/^# define WHT /;"	d
WORD	minishell.h	/^# define WORD	/;"	d
YEL	minishell.h	/^# define YEL /;"	d
YELLOW	Makefile	/^YELLOW		:= $(shell tput setaf 3)$/;"	m
_cd	builtins/cd.c	/^void	_cd(t_cmd *cmd)$/;"	f
_echo	builtins/echo.c	/^int	_echo(t_cmd *cmd)$/;"	f
_env	builtins/env.c	/^void	_env(t_cmd *cmd, t_env *env)$/;"	f
_export	builtins/export.c	/^void	_export(t_cmd *cmd)$/;"	f
_pwd	builtins/pwd.c	/^void	_pwd(void)$/;"	f
_unset	builtins/unset.c	/^void	_unset(t_cmd *cmd)$/;"	f
after_fork	execution/pipex.c	/^static void	after_fork(t_cmd **head, int i, int save_fdin)$/;"	f	file:
ambiguous_redirections	redirections/loop_redirections.c	/^int	ambiguous_redirections(t_cmd *cmd, int i)$/;"	f
change_dir	builtins/cd.c	/^static int	change_dir(char *oldpwd, char *path)$/;"	f	file:
change_env	builtins/cd.c	/^static void	change_env(char *oldpwd, char *pwd, t_cmd *cmd)$/;"	f	file:
change_env_error	builtins/cd.c	/^static void	change_env_error(char *oldpwd, char *pwd, t_cmd *cmd)$/;"	f	file:
change_env_var	builtins/export.c	/^static int	change_env_var(char *s, char *var_name, int i)$/;"	f	file:
change_i	builtins/exit.c	/^static int	change_i(t_cmd *cmd, int i)$/;"	f	file:
character_extraction	parsing/token_extraction.c	/^int	character_extraction(char *line, int ind)$/;"	f
check_access	execution/exec_bin.c	/^static int	check_access(t_cmd *cmd)$/;"	f	file:
check_access	execution/search_path_in_env_table.c	/^static int	check_access(int start, int end, char *s, t_cmd *cmd)$/;"	f	file:
check_dollar	parsing/expansion.c	/^int	check_dollar(t_token *curr, int i)$/;"	f
check_each_path	execution/search_path_in_env_table.c	/^static int	check_each_path(char *s, t_cmd *cmd)$/;"	f	file:
check_env	builtins/env.c	/^static int	check_env(t_cmd *cmd)$/;"	f	file:
check_errors	libft/get_next_line/get_next_line.c	/^int	check_errors(int fd, char **line)$/;"	f
check_execve	execution/exec_bin.c	/^static void	check_execve(t_cmd *cmd)$/;"	f	file:
check_exit_arguments	builtins/exit.c	/^static int	check_exit_arguments(t_cmd *cmd)$/;"	f	file:
check_fdin_redir	execution/pipex_helper.c	/^static int	check_fdin_redir(t_cmd *cmd)$/;"	f	file:
check_for_heredoc	tokens/token_routine_set_id.c	/^int	check_for_heredoc(t_token **head, int pos)$/;"	f
check_for_heredoc1	tokens/reset_token_id.c	/^static int	check_for_heredoc1(t_token **head, int pos)$/;"	f	file:
check_for_malloc_error	main.c	/^void	check_for_malloc_error(t_cmd **head)$/;"	f
check_heredoc_dollar	parsing/here_doc_unquoted_keyword.c	/^static int	check_heredoc_dollar(t_token *token, int i)$/;"	f	file:
check_if_quoted_keyword	parsing/here_doc_check_if_quoted_keyword.c	/^static int	check_if_quoted_keyword(char *key_word)$/;"	f	file:
check_if_valid_identifier	builtins/export_unset_helper.c	/^int	check_if_valid_identifier(char *s, char *command)$/;"	f
check_if_var_exists	builtins/export_unset_helper.c	/^int	check_if_var_exists(char *s)$/;"	f
check_multiple_operators_error	parsing/syntax_errors.c	/^int	check_multiple_operators_error(int i, int num, char c)$/;"	f
check_pipeline_errors	parsing/syntax_errors.c	/^int	check_pipeline_errors(char *s, int i, char c, int num)$/;"	f
check_quotes_errors	parsing/syntax_errors.c	/^int	check_quotes_errors(char *s, char c, int *i)$/;"	f
check_var_exist	parsing/expansion_expand_var_helper.c	/^int	check_var_exist(t_token *tmp)$/;"	f
child_signal_handler	signal_handler/signal_handlers.c	/^void	child_signal_handler(void)$/;"	f
cmd	minishell.h	/^	char			**cmd;$/;"	m	struct:s_cmd
cmd_backadd	command_struct/init_cmd.c	/^static void	cmd_backadd(t_cmd **head, t_cmd *new)$/;"	f	file:
cmd_is_builtin	execution/exec_builtins.c	/^int	cmd_is_builtin(char *s)$/;"	f
cmd_linked_list	command_struct/init_cmd.c	/^t_cmd	*cmd_linked_list(t_token **token)$/;"	f
column_size	execution/copy_env_tab.c	/^int	column_size(t_env **head)$/;"	f
content	libft/includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content	minishell.h	/^	char				*content;$/;"	m	struct:s_token
copy_cmd	command_struct/init_cmd_cmd.c	/^static int	copy_cmd(t_token **token, t_cmd *cmd)$/;"	f	file:
copy_cmd_helper	command_struct/init_cmd_cmd.c	/^static int	copy_cmd_helper(t_token *ptr, t_cmd *cmd, int i)$/;"	f	file:
copy_env_tab	execution/copy_env_tab.c	/^int	copy_env_tab(void)$/;"	f
copy_helper	parsing/expansion_join_tokens.c	/^static void	copy_helper(t_token **new, t_token *curr)$/;"	f	file:
copy_join_tokens	parsing/expansion_join_tokens.c	/^static int	copy_join_tokens(t_token **new, t_token *curr, int size)$/;"	f	file:
copy_path	execution/search_path_in_env_table.c	/^static void	copy_path(int start, int end, char *s, t_cmd *cmd)$/;"	f	file:
copy_redir	command_struct/init_cmd_redir.c	/^static int	copy_redir(t_token **token, t_cmd *cmd)$/;"	f	file:
copy_redir_helper	command_struct/init_cmd_redir.c	/^static int	copy_redir_helper(t_token *ptr, t_cmd *cmd, int i)$/;"	f	file:
copy_string	parsing/expansion_trim_dollar.c	/^static int	copy_string(t_token *curr, char **s, int pos)$/;"	f	file:
copy_string_unquoted	parsing/quote_removing.c	/^static int	copy_string_unquoted(t_token *curr, char *new_str, \\$/;"	f	file:
count_metachar	parsing/syntax_errors.c	/^int	count_metachar(char *s, char c, int num)$/;"	f
count_nb_cmds	execution/execution.c	/^static int	count_nb_cmds(t_cmd **head)$/;"	f	file:
create_cmd	command_struct/init_cmd_cmd.c	/^int	create_cmd(t_token **token, t_cmd *cmd)$/;"	f
create_cmd_linked_list	command_struct/init_cmd.c	/^static void	create_cmd_linked_list(t_token **token, t_cmd *head)$/;"	f	file:
create_heredoc_name	parsing/here_doc.c	/^static char	*create_heredoc_name(int j)$/;"	f	file:
create_new	global_variable/increment_shlvl.c	/^static t_env	*create_new(void)$/;"	f	file:
create_nextline	libft/get_next_line/get_next_line.c	/^char	*create_nextline(char *result, char *line)$/;"	f
create_redir	command_struct/init_cmd_redir.c	/^int	create_redir(t_token **token, t_cmd *cmd)$/;"	f
create_result	libft/get_next_line/get_next_line.c	/^char	*create_result(char *line)$/;"	f
create_shlvl	global_variable/increment_shlvl.c	/^static int	create_shlvl(void)$/;"	f	file:
create_token	parsing/here_doc_quoted_keyword.c	/^static t_token	*create_token(t_token *token, char *key_word)$/;"	f	file:
create_token_head	parsing/token_extraction.c	/^t_token	*create_token_head(char *line, int i, int len, int *flag)$/;"	f
del	libft/libft/del.c	/^void	del(void *content)$/;"	f
delete_all_heredocs	parsing/delete_all_heredocs.c	/^void	delete_all_heredocs(int nb)$/;"	f
delete_env_helper	builtins/unset.c	/^static void	delete_env_helper(t_env **head, t_env *curr, \\$/;"	f	file:
delete_env_var	builtins/unset.c	/^static void	delete_env_var(t_env **head, char *s)$/;"	f	file:
delete_first_el	libft/libft/ft_lstdel_first_el.c	/^void	delete_first_el(t_list **a)$/;"	f
delete_helper	tokens/token_routine_delete.c	/^static t_token	*delete_helper(t_token **head, t_token *curr, \\$/;"	f	file:
delete_here_doc	redirections/restaure_fds.c	/^void	delete_here_doc(int i)$/;"	f
delete_last_el	libft/libft/ft_lstdel_last_el.c	/^void	delete_last_el(t_list **a)$/;"	f
delete_token	tokens/token_routine_delete.c	/^t_token	*delete_token(t_token **head)$/;"	f
env	minishell.h	/^	t_env				*env;$/;"	m	struct:s_shell
env_list_size	builtins/unset.c	/^static int	env_list_size(t_env **head)$/;"	f	file:
error_exit	minishell.h	/^	int					error_exit;$/;"	m	struct:s_shell
error_message	malloc_error/malloc_error_print_message.c	/^void	error_message(char *s)$/;"	f
error_message2	malloc_error/malloc_error_print_message.c	/^void	error_message2(char *s1, char *s2)$/;"	f
execute_bin	execution/exec_bin.c	/^void	execute_bin(t_cmd *cmd)$/;"	f
execute_builtin	execution/exec_builtins.c	/^void	execute_builtin(t_cmd *cmd)$/;"	f
execute_one_bin	execution/exec_one_cmd.c	/^static void	execute_one_bin(t_cmd *cmd)$/;"	f	file:
execute_one_bin_helper	execution/exec_one_cmd.c	/^static void	execute_one_bin_helper(t_cmd *cmd)$/;"	f	file:
execution	execution/execution.c	/^void	execution(t_cmd **head)$/;"	f
exit_status	minishell.h	/^	volatile int		exit_status;$/;"	m	struct:s_shell
expand_here_doc	parsing/here_doc_unquoted_keyword.c	/^static int	expand_here_doc(t_token *token, int pos)$/;"	f	file:
expand_var	parsing/expansion_helper.c	/^int	expand_var(t_token **new)$/;"	f
expansion	parsing/expansion.c	/^int	expansion(t_token **head, t_token *curr, int pos)$/;"	f
expansion_next_token	parsing/expansion.c	/^static void	expansion_next_token(t_token **head, t_token *curr, int pos)$/;"	f	file:
export_no_args	builtins/export.c	/^static void	export_no_args(void)$/;"	f	file:
export_with_args	builtins/export.c	/^static int	export_with_args(char *s)$/;"	f	file:
export_with_args_helper	builtins/export.c	/^static int	export_with_args_helper(char *var_name, char *s, int i)$/;"	f	file:
extract_cmd_path	execution/get_path.c	/^static int	extract_cmd_path(char *path, t_cmd *cmd)$/;"	f	file:
fd	minishell.h	/^	int				fd[2];$/;"	m	struct:s_cmd
ffd_in	minishell.h	/^	int				ffd_in;$/;"	m	struct:s_cmd
ffd_out	minishell.h	/^	int				ffd_out;$/;"	m	struct:s_cmd
first_argument_is_numeric	builtins/exit.c	/^static void	first_argument_is_numeric(t_cmd *cmd, int size)$/;"	f	file:
free_and_exit_prog	utils.c	/^void	free_and_exit_prog(t_cmd **head, int exit_code)$/;"	f
free_before_exit	utils.c	/^void	free_before_exit(t_cmd **head)$/;"	f
free_cmd	command_struct/free_cmd.c	/^void	free_cmd(t_cmd **head)$/;"	f
free_env	environnement/envp_routine.c	/^void	free_env(t_env **head)$/;"	f
free_env_var	builtins/unset.c	/^static void	free_env_var(t_env *curr)$/;"	f	file:
free_shell	global_variable/init_global.c	/^void	free_shell(void)$/;"	f
free_tab2d	command_struct/free_cmd.c	/^void	free_tab2d(char **s)$/;"	f
free_token	tokens/token_routine.c	/^void	free_token(t_token **head)$/;"	f
ft_atoi	libft/libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_atoi_base	libft/libft/ft_atoi_base.c	/^int	ft_atoi_base(const char *str, int str_base)$/;"	f
ft_bzero	libft/libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_calloc_count	libft/get_next_line/get_next_line_utils.c	/^char	*ft_calloc_count(int count)$/;"	f
ft_count_int	libft/ft_printf/ft_count_int.c	/^int	ft_count_int(int n)$/;"	f
ft_count_nbchar	libft/libft/ft_itoa.c	/^size_t	ft_count_nbchar(int n)$/;"	f
ft_count_nbsubstr	libft/libft/ft_split.c	/^size_t	ft_count_nbsubstr(const char *s, char c)$/;"	f
ft_count_unsigned_int	libft/ft_printf/ft_count_unsigned_int.c	/^int	ft_count_unsigned_int(unsigned int n)$/;"	f
ft_dprintf	libft/ft_printf/ft_dprintf.c	/^int	ft_dprintf(int fd, const char *last, ...)$/;"	f
ft_exe	execution/pipex_helper.c	/^void	ft_exe(int i, int save_fdin, t_cmd *cmd)$/;"	f
ft_exit	builtins/exit.c	/^void	ft_exit(t_cmd *cmd)$/;"	f
ft_format_specifier	libft/ft_printf/ft_printf.c	/^void	ft_format_specifier(char format, va_list ap, int *count)$/;"	f
ft_format_specifier_fd	libft/ft_printf/ft_dprintf.c	/^void	ft_format_specifier_fd(char format, va_list ap, int *count, int fd)$/;"	f
ft_isalnum	libft/libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_join	libft/get_next_line/get_next_line_utils.c	/^char	*ft_join(char *line, char *buffer)$/;"	f
ft_lstadd_back	libft/libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f
ft_lstdelone	libft/libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	libft/libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_nb_char_substr	libft/libft/ft_split.c	/^unsigned int	ft_nb_char_substr(char const *s, char c, unsigned int start)$/;"	f
ft_nb_is_negative	libft/libft/ft_itoa.c	/^char	*ft_nb_is_negative(int n, char *itoa_str, size_t nb_char)$/;"	f
ft_nb_is_positive	libft/libft/ft_itoa.c	/^char	*ft_nb_is_positive(int n, char *itoa_str, size_t nb_char)$/;"	f
ft_printf	libft/ft_printf/ft_printf.c	/^int	ft_printf(const char *last, ...)$/;"	f
ft_printf_address	libft/ft_printf/ft_printf_address.c	/^void	ft_printf_address(uintptr_t n, int fd, int *count)$/;"	f
ft_printf_char	libft/ft_printf/ft_printf_char.c	/^void	ft_printf_char(char c, int fd, int *count)$/;"	f
ft_printf_hexa	libft/ft_printf/ft_printf_hexa.c	/^void	ft_printf_hexa(unsigned int n, int fd, int *count, char c)$/;"	f
ft_printf_int	libft/ft_printf/ft_printf_int.c	/^void	ft_printf_int(int n, int fd, int *count)$/;"	f
ft_printf_str	libft/ft_printf/ft_printf_str.c	/^void	ft_printf_str(char *s, int fd, int *count)$/;"	f
ft_printf_unsint	libft/ft_printf/ft_printf_unsint.c	/^void	ft_printf_unsint(unsigned int n, int fd, int *count)$/;"	f
ft_put_hexanbr_fd	libft/ft_printf/ft_put_hexanbr_fd.c	/^void	ft_put_hexanbr_fd(unsigned int n, int fd, int *count)$/;"	f
ft_put_int	libft/ft_printf/ft_put_int.c	/^int	ft_put_int(int n, int fd, int *count)$/;"	f
ft_put_uintptr_fd	libft/ft_printf/ft_printf_address.c	/^void	ft_put_uintptr_fd(uintptr_t n, int fd, int *count)$/;"	f
ft_put_unsnbr_fd	libft/ft_printf/ft_put_unsnbr_fd.c	/^void	ft_put_unsnbr_fd(unsigned int n, int fd)$/;"	f
ft_putchar_fd	libft/libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libft/libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	libft/libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_start_index_substr	libft/libft/ft_split.c	/^unsigned int	ft_start_index_substr(char const *s, char c, unsigned int start)$/;"	f
ft_strchr	libft/libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcpy	libft/libft/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strcspn	libft/libft/ft_strcspn.c	/^size_t	ft_strcspn(const char *s, const char *reject)$/;"	f
ft_strdup	libft/libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_striteri	libft/libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft/libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	libft/libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strlen_int	libft/get_next_line/get_next_line_utils.c	/^int	ft_strlen_int(const char *string)$/;"	f
ft_strmapi	libft/libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libft/libft/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f
ft_strnstr	libft/libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strpbrk	libft/libft/ft_strpbrk.c	/^char	*ft_strpbrk(const char *s1, const char *s2)$/;"	f
ft_strrchr	libft/libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strspn	libft/libft/ft_strspn.c	/^size_t	ft_strspn(const char *s, const char *accept)$/;"	f
ft_strtrim	libft/libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
g_shell	main.c	/^t_shell	*g_shell;$/;"	v
get_cmd_size	command_struct/init_cmd_cmd.c	/^static int	get_cmd_size(t_token **token)$/;"	f	file:
get_env_var_value	environnement/get_env.c	/^char	*get_env_var_value(char *var_name)$/;"	f
get_envp	environnement/envp_routine.c	/^t_env	*get_envp(char **envp)$/;"	f
get_expanded_size	parsing/expansion_join_tokens.c	/^static int	get_expanded_size(char *s, int i)$/;"	f	file:
get_new_size	parsing/expansion_join_tokens.c	/^static int	get_new_size(t_token **new)$/;"	f	file:
get_next_line	libft/get_next_line/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
get_next_line_maxopen	libft/get_next_line/get_next_line_bonus.c	/^char	*get_next_line_maxopen(int fd)$/;"	f
get_path	execution/get_path.c	/^int	get_path(t_cmd *cmd)$/;"	f
get_redir_size	command_struct/init_cmd_redir.c	/^static int	get_redir_size(t_token *ptr)$/;"	f	file:
get_tokens	parsing/token_extraction.c	/^t_token	*get_tokens(char *line)$/;"	f
get_tokens_size	parsing/token_extraction.c	/^int	get_tokens_size(char *line, int *i)$/;"	f
handler	signal_handler/signal_handlers.c	/^static void	handler(int sig_code)$/;"	f	file:
here_doc	parsing/here_doc.c	/^int	here_doc(t_token **head)$/;"	f
here_doc_handler	signal_handler/signal_handlers.c	/^void	here_doc_handler(int sig_code)$/;"	f
here_doc_quote_removing	parsing/here_doc_quoted_keyword.c	/^int	here_doc_quote_removing(t_token *token, int pos)$/;"	f
here_doc_signal_handler	signal_handler/signal_handlers.c	/^void	here_doc_signal_handler(void)$/;"	f
heredoc_child_process	parsing/here_doc.c	/^static int	heredoc_child_process(char *key_word, int j)$/;"	f	file:
heredoc_flag	minishell.h	/^	int					heredoc_flag;$/;"	m	struct:s_shell
id	minishell.h	/^	int					id;$/;"	m	struct:s_token
increment_shlvl	global_variable/increment_shlvl.c	/^int	increment_shlvl(void)$/;"	f
init_cmd	command_struct/init_cmd.c	/^static t_cmd	*init_cmd(t_token **token)$/;"	f	file:
init_fds	command_struct/init_cmd.c	/^static void	init_fds(t_cmd *cmd)$/;"	f	file:
init_shell	global_variable/init_global.c	/^int	init_shell(char **envp)$/;"	f
init_sigset	signal_handler/init_sigset.c	/^void	init_sigset(sigset_t *set)$/;"	f
int_check	builtins/int_min_max.c	/^static int	int_check(char *str)$/;"	f	file:
is_blank	is_smth/is_white_space.c	/^int	is_blank(char c)$/;"	f
is_chevron	is_smth/is_operator.c	/^int	is_chevron(char c)$/;"	f
is_delimiter	is_smth/is_token.c	/^int	is_delimiter(char c)$/;"	f
is_dir	execution/get_path.c	/^static int	is_dir(char *path, t_cmd *cmd)$/;"	f	file:
is_dollar	is_smth/is_dollar.c	/^int	is_dollar(char c)$/;"	f
is_dollar_to_expand	parsing/expansion_dollar_conditions.c	/^int	is_dollar_to_expand(t_token *curr, int i)$/;"	f
is_double_quote	is_smth/is_quote.c	/^int	is_double_quote(char c)$/;"	f
is_lchevron	is_smth/is_operator.c	/^int	is_lchevron(char c)$/;"	f
is_metacharacter	is_smth/is_token.c	/^int	is_metacharacter(char c)$/;"	f
is_newline	is_smth/is_white_space.c	/^int	is_newline(char c)$/;"	f
is_numeric	is_smth/is_numeric.c	/^int	is_numeric(char *s)$/;"	f
is_operator	is_smth/is_operator.c	/^int	is_operator(char c)$/;"	f
is_pipeline	is_smth/is_operator.c	/^int	is_pipeline(char c)$/;"	f
is_punct	is_smth/is_question.c	/^int	is_punct(char c)$/;"	f
is_question	is_smth/is_question.c	/^int	is_question(char c)$/;"	f
is_quote	is_smth/is_quote.c	/^int	is_quote(char c)$/;"	f
is_rchevron	is_smth/is_operator.c	/^int	is_rchevron(char c)$/;"	f
is_simple_quote	is_smth/is_quote.c	/^int	is_simple_quote(char c)$/;"	f
is_white_space	is_smth/is_white_space.c	/^int	is_white_space(char c)$/;"	f
is_word	is_smth/is_token.c	/^int	is_word(char c)$/;"	f
join_tokens	parsing/expansion_join_tokens.c	/^int	join_tokens(t_token **new, t_token *curr)$/;"	f
joined_malloc	execution/copy_env_tab.c	/^char	*joined_malloc(int len_name, int len_value)$/;"	f
keyword_is_quoted	parsing/here_doc_quoted_keyword.c	/^void	keyword_is_quoted(char *key_word, int fd)$/;"	f
keyword_is_unquoted	parsing/here_doc_unquoted_keyword.c	/^void	keyword_is_unquoted(char *key_word, int fd)$/;"	f
kill_zombies	execution/pipex_helper.c	/^void	kill_zombies(t_cmd **head, int flag)$/;"	f
link_env	environnement/envp_routine.c	/^int	link_env(t_env **head, t_env *last)$/;"	f
link_token	tokens/token_routine.c	/^int	link_token(t_token **head, t_token *new)$/;"	f
loop_dollars	parsing/expansion_looping.c	/^int	loop_dollars(char *s, int i)$/;"	f
loop_through	parsing/expansion_looping.c	/^int	loop_through(char *s, int i)$/;"	f
main	main.c	/^int	main(int ac, char **av, char **envp)$/;"	f
main	tester/test_files/loop.c	/^int	main(int argc, char const *argv[])$/;"	f
make_redirections	redirections/loop_redirections.c	/^int	make_redirections(t_cmd *cmd, int j)$/;"	f
make_redirections_helper	redirections/loop_redirections.c	/^static int	make_redirections_helper(t_cmd *cmd, int j, int i)$/;"	f	file:
malloc_error_print_message	malloc_error/malloc_error_print_message.c	/^void	malloc_error_print_message(char *s)$/;"	f
name_plus_value	execution/copy_env_tab.c	/^char	*name_plus_value(char *name, char *value)$/;"	f
negative_int_check	builtins/int_min_max.c	/^static int	negative_int_check(char *str)$/;"	f	file:
new_env	environnement/envp_routine.c	/^t_env	*new_env(char *envp)$/;"	f
new_env_helper	environnement/envp_routine.c	/^int	new_env_helper(char *envp, int end)$/;"	f
new_id	parsing/expansion_helper.c	/^int	new_id(t_token **new)$/;"	f
new_token	tokens/token_routine.c	/^t_token	*new_token(char *line, int start, int len)$/;"	f
next	libft/includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	minishell.h	/^	struct s_cmd	*next;$/;"	m	struct:s_cmd	typeref:struct:s_cmd::s_cmd
next	minishell.h	/^	struct s_env	*next;$/;"	m	struct:s_env	typeref:struct:s_env::s_env
next	minishell.h	/^	struct s_token		*next;$/;"	m	struct:s_token	typeref:struct:s_token::s_token
no_int_errors	builtins/int_min_max.c	/^int	no_int_errors(char *str)$/;"	f
not_within_squotes	parsing/expansion_dollar_conditions.c	/^int	not_within_squotes(t_token *curr, int pos)$/;"	f
one_cmd	execution/exec_one_cmd.c	/^void	one_cmd(t_cmd *cmd)$/;"	f
parent_signal_handler	signal_handler/signal_handlers.c	/^void	parent_signal_handler(void)$/;"	f
parsing	parsing/parsing.c	/^t_token	*parsing(char *line)$/;"	f
path	minishell.h	/^	char			*path;$/;"	m	struct:s_cmd
pid	minishell.h	/^	pid_t			pid;$/;"	m	struct:s_cmd
pipex	execution/pipex.c	/^void	pipex(t_cmd **head)$/;"	f
pipex_get_exit_status	execution/pipex.c	/^static void	pipex_get_exit_status(t_cmd **head)$/;"	f	file:
pipex_handler	signal_handler/pipex_handler.c	/^static void	pipex_handler(int sig_code)$/;"	f	file:
pipex_helper	execution/pipex.c	/^static void	pipex_helper(int fd_pipe[2], t_cmd *cmd, int i, int *save_fdin)$/;"	f	file:
pipex_signal_handler	signal_handler/pipex_handler.c	/^void	pipex_signal_handler(void)$/;"	f
pos	minishell.h	/^	int					pos;$/;"	m	struct:s_token
positive_int_check	builtins/int_min_max.c	/^static int	positive_int_check(char *str)$/;"	f	file:
power	libft/libft/power.c	/^int	power(int str_base, int power)$/;"	f
prepare_expand	parsing/expansion_helper.c	/^int	prepare_expand(t_token *curr, int i)$/;"	f
prepare_forstash	libft/get_next_line/get_next_line_utils.c	/^void	prepare_forstash(char **line, char **buffer)$/;"	f
print_chdir_error	builtins/cd.c	/^static void	print_chdir_error(char *arg, char *err)$/;"	f	file:
print_echo	builtins/echo.c	/^static void	print_echo(char **s, int i)$/;"	f	file:
print_export_unset_error	builtins/export_unset_helper.c	/^void	print_export_unset_error(char *identifier, char *command)$/;"	f
print_getcwd_error	builtins/pwd.c	/^void	print_getcwd_error(char *s)$/;"	f
print_signal_message	execution/exec_one_cmd.c	/^static void	print_signal_message(int sig_code)$/;"	f	file:
print_signal_message	execution/pipex.c	/^static void	print_signal_message(int sig_code, int *flag)$/;"	f	file:
print_syntax_error_char	parsing/syntax_errors_print_message.c	/^void	print_syntax_error_char(char c)$/;"	f
print_syntax_error_dchar	parsing/syntax_errors_print_message.c	/^void	print_syntax_error_dchar(char c)$/;"	f
print_syntax_error_str	parsing/syntax_errors_print_message.c	/^void	print_syntax_error_str(char *s)$/;"	f
quote_removing	parsing/quote_removing.c	/^int	quote_removing(t_token **head, t_token *curr, int pos)$/;"	f
read_fd	libft/get_next_line/get_next_line.c	/^char	*read_fd(char *line, int fd, int *error)$/;"	f
readline_routine	main.c	/^char	*readline_routine(void)$/;"	f
redir	minishell.h	/^	char			**redir;$/;"	m	struct:s_cmd
redir_fdin	redirections/do_redirections.c	/^int	redir_fdin(t_cmd *cmd, char *redir_op, char *file_path, int j)$/;"	f
redir_fdout	redirections/do_redirections.c	/^int	redir_fdout(t_cmd *cmd, char *redir_op, char *file_path)$/;"	f
redir_heredoc	redirections/do_redirections.c	/^static int	redir_heredoc(t_cmd *cmd, int j)$/;"	f	file:
redir_stdin	redirections/do_redirections.c	/^static int	redir_stdin(t_cmd *cmd)$/;"	f	file:
remove_q	parsing/quote_removing.c	/^int	remove_q(t_token *curr, int pos)$/;"	f
replace_content	parsing/expansion_expand_var_helper.c	/^static int	replace_content(t_token *tmp, char *s)$/;"	f	file:
res	minishell.h	/^	int					res;$/;"	m	struct:s_token
res	minishell.h	/^	int				res;$/;"	m	struct:s_cmd
reset_env_tab	execution/execution.c	/^static int	reset_env_tab(void)$/;"	f	file:
reset_oldpwd	global_variable/init_global.c	/^void	reset_oldpwd(void)$/;"	f
reset_token_id	tokens/reset_token_id.c	/^void	reset_token_id(t_token **head, t_token *token)$/;"	f
restaure_fdin	redirections/restaure_fds.c	/^void	restaure_fdin(t_cmd *cmd)$/;"	f
restaure_fdout	redirections/restaure_fds.c	/^void	restaure_fdout(t_cmd *cmd)$/;"	f
restaure_fds	redirections/restaure_fds.c	/^void	restaure_fds(t_cmd *cmd, int i)$/;"	f
s_cmd	minishell.h	/^typedef struct s_cmd$/;"	s
s_env	minishell.h	/^typedef struct s_env$/;"	s
s_list	libft/includes/libft.h	/^typedef struct s_list$/;"	s
s_shell	minishell.h	/^typedef struct s_shell$/;"	s
s_token	minishell.h	/^typedef struct s_token$/;"	s
save_env	minishell.h	/^	char				**save_env;$/;"	m	struct:s_shell
save_fdin	minishell.h	/^	int				save_fdin;$/;"	m	struct:s_cmd
save_fdout	minishell.h	/^	int				save_fdout;$/;"	m	struct:s_cmd
search_path	execution/search_path_in_env_table.c	/^int	search_path(t_cmd *cmd, char **env)$/;"	f
set_heredoc_id	parsing/here_doc_unquoted_keyword.c	/^static void	set_heredoc_id(t_token *token)$/;"	f	file:
set_id	tokens/token_routine_set_id.c	/^void	set_id(t_token **head, t_token *token)$/;"	f
set_id_expansion	tokens/token_routine_set_id.c	/^int	set_id_expansion(t_token *token)$/;"	f
shell_no_env	global_variable/init_global.c	/^static int	shell_no_env(void)$/;"	f	file:
size_echo_cmd	builtins/echo.c	/^static int	size_echo_cmd(char **s)$/;"	f	file:
size_tab2d	utils.c	/^int	size_tab2d(char **s)$/;"	f
size_var	parsing/expansion_expand_var_helper.c	/^int	size_var(char *s)$/;"	f
split_tokens	parsing/expansion_helper.c	/^int	split_tokens(t_token **new, char *s, int start, int len)$/;"	f
status	minishell.h	/^	int				status;$/;"	m	struct:s_cmd
str_lowercase	libft/libft/str_lowercase.c	/^char	*str_lowercase(char *str)$/;"	f
string_replace	parsing/quote_removing.c	/^int	string_replace(t_token *curr, int start, int pos)$/;"	f
syntax_error_check	parsing/syntax_errors.c	/^int	syntax_error_check(char *s)$/;"	f
t_cmd	minishell.h	/^}	t_cmd;$/;"	t	typeref:struct:s_cmd
t_env	minishell.h	/^}	t_env;$/;"	t	typeref:struct:s_env
t_list	libft/includes/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_shell	minishell.h	/^}	t_shell;$/;"	t	typeref:struct:s_shell
t_token	minishell.h	/^}	t_token;$/;"	t	typeref:struct:s_token
there_is_n	libft/get_next_line/get_next_line_utils.c	/^int	there_is_n(char *line)$/;"	f
token_linked_list	tokens/token_routine.c	/^int	token_linked_list(t_token **head, char *line, int start, int len)$/;"	f
token_list_size	tokens/token_routine_delete.c	/^int	token_list_size(t_token	**head)$/;"	f
transform	libft/libft/ft_atoi_base.c	/^int	transform(char c)$/;"	f
trim_dollar	parsing/expansion_trim_dollar.c	/^int	trim_dollar(t_token *curr, int pos)$/;"	f
var_len	parsing/expansion_helper.c	/^static int	var_len(char *s, int i)$/;"	f	file:
var_name	minishell.h	/^	char			*var_name;$/;"	m	struct:s_env
var_value	minishell.h	/^	char			*var_value;$/;"	m	struct:s_env
var_value_is_numeric	global_variable/increment_shlvl.c	/^static int	var_value_is_numeric(t_env *env)$/;"	f	file:
var_value_not_numeric	global_variable/increment_shlvl.c	/^static int	var_value_not_numeric(t_env *env)$/;"	f	file:
word_extraction	parsing/token_extraction.c	/^int	word_extraction(char *line, int ind)$/;"	f
write1	parsing/here_doc_unquoted_keyword.c	/^static int	write1(t_token *token, char *key_word, int fd)$/;"	f	file:
write2	parsing/here_doc_quoted_keyword.c	/^static int	write2(char	*line, char *new_keyword, int fd)$/;"	f	file:
write_in_heredoc	parsing/here_doc.c	/^static void	write_in_heredoc(char *key_word, int j)$/;"	f	file:
write_in_heredoc_helper	parsing/here_doc_check_if_quoted_keyword.c	/^void	write_in_heredoc_helper(char *key_word, int fd)$/;"	f
