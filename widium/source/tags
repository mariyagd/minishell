!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BONUS	libft/Makefile	/^BONUS			= chained_list\/ft_lstnew.c \\$/;"	m
BONUS_OBJS	libft/Makefile	/^BONUS_OBJS		= $(BONUS:.c=.o)$/;"	m
BUFFER_SIZE	libft/get_next_line/get_next_line.c	/^# define BUFFER_SIZE /;"	d	file:
BUFF_SIZE	minishell.h	/^# define BUFF_SIZE /;"	d
CLASS_H	header/class.h	/^# define CLASS_H$/;"	d
EXECUTION_H	header/execution.h	/^# define EXECUTION_H$/;"	d
FLAGS	libft/Makefile	/^FLAGS 			= -Wall -Wextra -Werror -I.$/;"	m
FREE_H	header/free.h	/^# define FREE_H$/;"	d
GET_H	header/get.h	/^# define GET_H$/;"	d
IS_H	header/is.h	/^# define IS_H$/;"	d
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
MINISHELL_H	minishell.h	/^# define MINISHELL_H$/;"	d
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NONE_VALUE	header/class.h	/^# define NONE_VALUE /;"	d
OBJS	libft/Makefile	/^OBJS			= $(SRCS:.c=.o)$/;"	m
SRCS	libft/Makefile	/^SRCS = check\/ft_isdigit.c \\$/;"	m
TOKEN_AND	header/token.h	/^# define TOKEN_AND /;"	d
TOKEN_APPEND_CHEVRON	header/token.h	/^# define TOKEN_APPEND_CHEVRON /;"	d
TOKEN_ARGUMENT	header/token.h	/^# define TOKEN_ARGUMENT /;"	d
TOKEN_BINARY	header/token.h	/^# define TOKEN_BINARY /;"	d
TOKEN_BLANK	header/token.h	/^# define TOKEN_BLANK /;"	d
TOKEN_BOOLEAN	header/token.h	/^# define TOKEN_BOOLEAN /;"	d
TOKEN_BUILT_IN	header/token.h	/^# define TOKEN_BUILT_IN /;"	d
TOKEN_COMMAND	header/token.h	/^# define TOKEN_COMMAND /;"	d
TOKEN_DOUBLE_QUOTE	header/token.h	/^# define TOKEN_DOUBLE_QUOTE /;"	d
TOKEN_FILE	header/token.h	/^# define TOKEN_FILE /;"	d
TOKEN_FLAGS	header/token.h	/^# define TOKEN_FLAGS /;"	d
TOKEN_H	header/token.h	/^# define TOKEN_H$/;"	d
TOKEN_HERE_DOC	header/token.h	/^# define TOKEN_HERE_DOC /;"	d
TOKEN_INPUT_CHEVRON	header/token.h	/^# define TOKEN_INPUT_CHEVRON /;"	d
TOKEN_LIMITER	header/token.h	/^# define TOKEN_LIMITER /;"	d
TOKEN_NOT_FINISH	header/token.h	/^# define TOKEN_NOT_FINISH /;"	d
TOKEN_NULL	header/token.h	/^# define TOKEN_NULL /;"	d
TOKEN_OR	header/token.h	/^# define TOKEN_OR /;"	d
TOKEN_OUTPUT_CHEVRON	header/token.h	/^# define TOKEN_OUTPUT_CHEVRON /;"	d
TOKEN_PARANTHESIS	header/token.h	/^# define TOKEN_PARANTHESIS /;"	d
TOKEN_PIPE	header/token.h	/^# define TOKEN_PIPE /;"	d
TOKEN_REDIRECTION	header/token.h	/^# define TOKEN_REDIRECTION /;"	d
TOKEN_SINGLE_QUOTE	header/token.h	/^# define TOKEN_SINGLE_QUOTE /;"	d
TOKEN_STRING	header/token.h	/^# define TOKEN_STRING /;"	d
TOKEN_VARIABLE	header/token.h	/^# define TOKEN_VARIABLE /;"	d
TOKEN_WILDCARD	header/token.h	/^# define TOKEN_WILDCARD /;"	d
TOKEN_WORD	header/token.h	/^# define TOKEN_WORD /;"	d
VALUE	header/class.h	/^# define VALUE /;"	d
VERBOSE_H	header/verbose.h	/^# define VERBOSE_H$/;"	d
add_arg_list	env/chained.c	/^void	add_arg_list(t_cmd *cmd, t_arg *arg)$/;"	f
add_env_variable	env/create_env_var.c	/^char	**add_env_variable(char **variables, char *var)$/;"	f
add_line_list	env/line.c	/^void	add_line_list(t_env *env, t_line *line)$/;"	f
add_line_to_env	env/line.c	/^void	add_line_to_env(t_env *env, char *content)$/;"	f
add_new_env_variable	env/create_env_var.c	/^void	add_new_env_variable(t_env *env, t_var *new)$/;"	f
add_signal_env_var	env/signal.c	/^void	add_signal_env_var(t_env *env)$/;"	f
add_token_list	env/chained.c	/^void	add_token_list(t_env *env, t_token *token)$/;"	f
add_variables_list	env/chained.c	/^void	add_variables_list(t_env *env, t_var *var)$/;"	f
append_bin_name_in_args	processing/bin_processing.c	/^char	**append_bin_name_in_args(char **args, char *name)$/;"	f
arg	header/class.h	/^	char	*arg;$/;"	m	struct:s_cmd
arg_classification	detection/classification.c	/^int	arg_classification(t_env *env, t_cmd *cmd, char *line, int index)$/;"	f
arg_redirect_extraction	detection/extraction.c	/^int	arg_redirect_extraction(t_env *env, t_token *token, char *line, int index)$/;"	f
arg_tokenizer	tokenization/cmd_tokenizer.c	/^t_arg	*arg_tokenizer(char *line, int start, int end, int id)$/;"	f
args	header/class.h	/^	char	**args;$/;"	m	struct:s_cmd
argument_extraction	detection/argument_extraction.c	/^int	argument_extraction(t_env *env, t_cmd *cmd, char *line, int index)$/;"	f
ask_verbose	verbose/verbose.c	/^void	ask_verbose(t_env *env)$/;"	f
assign_env_var_id	built_in/export.c	/^int	assign_env_var_id(char *value)$/;"	f
bin	header/class.h	/^	char	*bin;$/;"	m	struct:s_cmd
bin_execution	execution/bin_exe.c	/^void	bin_execution(t_env *env, t_cmd *cmd, char **variables)$/;"	f
blank_arg_tokenizer	tokenization/tokenizer.c	/^int	blank_arg_tokenizer(t_env *env, t_cmd *cmd, char *line, int index)$/;"	f
blank_detection	parsing/word_detection.c	/^int	blank_detection(char *line, int index)$/;"	f
blank_escape	parsing/word_detection.c	/^int	blank_escape(char *line, int index)$/;"	f
built_in_execution	built_in/built_in_exe.c	/^int	built_in_execution(t_env *env, t_cmd *cmd)$/;"	f
call_prompt	env/signal.c	/^void	call_prompt(int key)$/;"	f
cd	built_in/built_in.c	/^int	cd(t_cmd *cmd, t_env *env)$/;"	f
change_arg_variable_content	processing/variable_value.c	/^void	change_arg_variable_content(t_env *env, t_arg *arg)$/;"	f
change_env_var_value	env/env_var_value.c	/^void	change_env_var_value(t_var *var, char *new_value)$/;"	f
change_env_var_value_with_name	env/env_var_value.c	/^void	change_env_var_value_with_name(t_env *env, char *name, char *value)$/;"	f
change_fd_cmd	processing/processing_redirection.c	/^void	change_fd_cmd(t_cmd *cmd, int fd_in, int fd_out)$/;"	f
change_or_create_var	built_in/export.c	/^void	change_or_create_var(t_env *env, char *name, char *value, int id)$/;"	f
check_error_built_in	error/error_built_in.c	/^int	check_error_built_in(t_cmd *cmd)$/;"	f
check_error_cd	error/error_built_in.c	/^int	check_error_cd(t_cmd *cmd)$/;"	f
check_error_echo	error/error_built_in.c	/^int	check_error_echo(t_cmd *cmd)$/;"	f
check_error_parsing	error/error.c	/^void	check_error_parsing(t_env *env)$/;"	f
check_error_token_basic_redirection	error/error_redirect.c	/^int	check_error_token_basic_redirection(t_token *token, t_redir *redir)$/;"	f
check_error_token_cmd	error/error_cmd.c	/^int	check_error_token_cmd(t_token *token)$/;"	f
check_error_token_heredoc	error/error_redirect.c	/^int	check_error_token_heredoc(t_redir *redir)$/;"	f
check_error_token_pipe	error/error_redirect.c	/^int	check_error_token_pipe(t_token *token, t_redir *redir)$/;"	f
check_error_token_redirection	error/error_redirect.c	/^int	check_error_token_redirection(t_token *token)$/;"	f
check_error_token_word	error/error.c	/^int	check_error_token_word(t_env *env, t_token *token)$/;"	f
choose_processing_built_in	processing/processing_built.c	/^void	choose_processing_built_in(t_env *env, t_cmd *cmd)$/;"	f
close_all_fd	redirection/close.c	/^void	close_all_fd(t_env *env)$/;"	f
close_fd_cmd	redirection/close.c	/^void	close_fd_cmd(t_cmd *cmd)$/;"	f
cmd_classification	detection/classification.c	/^t_token	*cmd_classification(t_env *env, char *content)$/;"	f
cmd_have_arg_flags	is/cmd_have.c	/^int	cmd_have_arg_flags(t_cmd *cmd)$/;"	f
cmd_have_args	is/cmd_have.c	/^int	cmd_have_args(t_cmd *cmd)$/;"	f
cmd_have_args_array	is/cmd_have.c	/^int	cmd_have_args_array(t_cmd *cmd)$/;"	f
cmd_have_argument	is/cmd_have.c	/^int	cmd_have_argument(t_cmd *cmd)$/;"	f
cmd_have_flags	is/cmd_have.c	/^int	cmd_have_flags(t_cmd *cmd)$/;"	f
cmd_have_standart_fd	is/is_fd.c	/^int	cmd_have_standart_fd(t_cmd *cmd)$/;"	f
cmd_list_to_array	concatenate/list_to_array.c	/^char	**cmd_list_to_array(t_cmd *cmd)$/;"	f
cmd_list_to_string	concatenate/list_to_array.c	/^char	*cmd_list_to_string(t_cmd *cmd)$/;"	f
cmd_tokenization	tokenization/tokenization.c	/^t_token	*cmd_tokenization(char *word, int id)$/;"	f
cmd_tokenizer	tokenization/cmd_tokenizer.c	/^int	cmd_tokenizer(t_env *env, char *line, char *content, int index)$/;"	f
col_count	libft/free/copy_array.c	/^size_t	col_count(char **str)$/;"	f
compare_line	redirection/heredoc.c	/^int	compare_line(char *line, char *limiter, int fd_tmp)$/;"	f
concatenate_cmd_args	concatenate/concatenate.c	/^void	concatenate_cmd_args(t_env *env)$/;"	f
connect_arg	tokenization/connect.c	/^void	connect_arg(t_arg *curr_arg, t_arg *next_arg)$/;"	f
connect_line	env/line.c	/^void	connect_line(t_line *curr_line, t_line *next_line)$/;"	f
connect_new_var	tokenization/connect.c	/^void	connect_new_var(t_var *prev_var, t_var *curr_var, t_var *next_var)$/;"	f
connect_token	tokenization/connect.c	/^void	connect_token(t_token *curr_token, t_token *next_token)$/;"	f
connect_var	tokenization/connect.c	/^void	connect_var(t_var *curr_var, t_var *next_var)$/;"	f
content	header/class.h	/^	char			*content;$/;"	m	struct:s_arg
content	header/class.h	/^	char			*content;$/;"	m	struct:s_blank
content	header/class.h	/^	char			*content;$/;"	m	struct:s_line
content	header/class.h	/^	char			*content;$/;"	m	struct:s_word
content	header/class.h	/^	char	*content;$/;"	m	struct:s_cmd
content	header/class.h	/^	char	*content;$/;"	m	struct:s_redir
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
convert_status_process_value	execution/status.c	/^int	convert_status_process_value(int status)$/;"	f
copy_dimensions	libft/array/join_array.c	/^void	copy_dimensions(char **array, char **new_array, int y, int *i)$/;"	f
copy_str_in_array	libft/array/join_array.c	/^void	copy_str_in_array(char **new_array, int index, char *str)$/;"	f
count_putchar_fd	libft/verbose/ft_putchar_fd.c	/^void	count_putchar_fd(char c, int *count, int fd)$/;"	f
count_puthexa_fd	libft/printf/ft_printf_fd.c	/^void	count_puthexa_fd(unsigned int nbr, int *count, int fd)$/;"	f
count_putnbr_fd	libft/printf/ft_printf_fd.c	/^void	count_putnbr_fd(int number, int *count, int fd)$/;"	f
count_putstr_fd	libft/printf/ft_printf_fd.c	/^void	count_putstr_fd(char *str, int *count, int fd)$/;"	f
create_arg	tokenization/create_token.c	/^t_arg	*create_arg(char *content, int id)$/;"	f
create_chained_var	env/create_env_var.c	/^void	create_chained_var(t_env *env, char **env_variable)$/;"	f
create_history	env/prompt.c	/^void	create_history(char *line)$/;"	f
create_path_bin	processing/bin_processing.c	/^char	*create_path_bin(char **bins, char *cmd)$/;"	f
create_token_command	tokenization/create_token.c	/^t_token	*create_token_command(int id, char *content)$/;"	f
create_token_file	tokenization/create_token.c	/^t_token	*create_token_file(char *name, int fd, int id)$/;"	f
create_token_redir	tokenization/create_token.c	/^t_token	*create_token_redir(char *line, int index, int new_index)$/;"	f
create_token_word	tokenization/create_token.c	/^t_token	*create_token_word(char *content, int id)$/;"	f
detect_type	libft/printf/ft_printf_fd.c	/^static int	detect_type(va_list arg, const char *str, int index, int fd)$/;"	f	file:
disconect_arg	exit_free/disconect.c	/^void	disconect_arg(t_arg *current_arg)$/;"	f
disconect_env_var	exit_free/disconect.c	/^void	disconect_env_var(t_env *env, t_var *var)$/;"	f
disconect_env_var_first	exit_free/disconect.c	/^void	disconect_env_var_first(t_env *env, t_var *var, t_var *var_next)$/;"	f
disconect_line	exit_free/disconect.c	/^void	disconect_line(t_line *current_line)$/;"	f
disconect_token	exit_free/disconect.c	/^void	disconect_token(t_token *token)$/;"	f
doesnt_have_error_parsing	error/error_env.c	/^int	doesnt_have_error_parsing(t_env *env)$/;"	f
doesnt_have_error_processing	error/error_env.c	/^int	doesnt_have_error_processing(t_env *env)$/;"	f
double_quotes_detection	parsing/quote_detection.c	/^int	double_quotes_detection(char *line, int index)$/;"	f
double_tokenization	tokenization/quote_tokenizer.c	/^void	double_tokenization(t_env *env, t_cmd *cmd, char *content)$/;"	f
double_tokenizer	tokenization/quote_tokenizer.c	/^int	double_tokenizer(t_env *env, t_cmd *cmd, char *line, int index)$/;"	f
echo	built_in/built_in.c	/^int	echo(t_cmd *cmd)$/;"	f
env_built_in	built_in/built_in.c	/^int	env_built_in(t_cmd *cmd, t_env *env)$/;"	f
env_have_multi_line	env/read_line.c	/^int	env_have_multi_line(t_env *env)$/;"	f
env_vars	header/class.h	/^	char		**env_vars;$/;"	m	struct:s_env
error_parsing	header/class.h	/^	int			error_parsing;$/;"	m	struct:s_env
error_processing	header/class.h	/^	int			error_processing;$/;"	m	struct:s_env
execute_cmd	execution/execution.c	/^int	execute_cmd(t_env *env, t_token *token)$/;"	f
execute_line	env/read_line.c	/^void	execute_line(t_env *env, char *line)$/;"	f
execute_multi_line	env/read_line.c	/^void	execute_multi_line(t_env *env, t_line *line)$/;"	f
execution	execution/execution.c	/^void	execution(t_env *env)$/;"	f
exit_built_in	built_in/built_in.c	/^void	exit_built_in(t_cmd *cmd, t_env *env)$/;"	f
exit_prompt	env/signal.c	/^void	exit_prompt(int key)$/;"	f
export_built_in	built_in/export.c	/^int	export_built_in(t_cmd *cmd, t_env *env)$/;"	f
extract_bin_name_in_path	processing/bin_processing.c	/^char	*extract_bin_name_in_path(char *path)$/;"	f
fd	header/class.h	/^	int		fd;$/;"	m	struct:s_file
fd_in	header/class.h	/^	int		fd_in;$/;"	m	struct:s_cmd
fd_in	header/class.h	/^	int		fd_in;$/;"	m	struct:s_redir
fd_out	header/class.h	/^	int		fd_out;$/;"	m	struct:s_cmd
fd_out	header/class.h	/^	int		fd_out;$/;"	m	struct:s_redir
file_detection	parsing/word_detection.c	/^int	file_detection(char *line, int index)$/;"	f
file_tokenizer	tokenization/tokenizer.c	/^t_token	*file_tokenizer(char *name, int id)$/;"	f
first_arg	header/class.h	/^	t_arg	*first_arg;$/;"	m	struct:s_cmd
first_line	header/class.h	/^	t_line		*first_line;$/;"	m	struct:s_env
first_token	header/class.h	/^	t_token		*first_token;$/;"	m	struct:s_env
first_var	header/class.h	/^	t_var		*first_var;$/;"	m	struct:s_env
flags	header/class.h	/^	char	*flags;$/;"	m	struct:s_cmd
flags_tokenizer	tokenization/cmd_tokenizer.c	/^int	flags_tokenizer(t_env *env, t_cmd *cmd, char *line, int index)$/;"	f
free_array	libft/free/free.c	/^void	free_array(char **array)$/;"	f
free_env_var	exit_free/free.c	/^void	free_env_var(t_var *var)$/;"	f
ft_append	libft/get_next_line/get_next_line.c	/^void	ft_append(char **statik, char *buf, int retour)$/;"	f
ft_arrayjoin_str	libft/array/join_array.c	/^char	**ft_arrayjoin_str(char **array, char *str, int pos)$/;"	f
ft_arrayremove_str	libft/array/join_array.c	/^char	**ft_arrayremove_str(char **array, int pos)$/;"	f
ft_atoi	libft/conversion/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_atol	libft/check/ft_atol.c	/^long long int	ft_atol(const char *str)$/;"	f
ft_bzero	libft/memory/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/memory/ft_calloc.c	/^void	*ft_calloc(size_t elementCount, size_t elementSize)$/;"	f
ft_check_format	libft/printf/ft_check_format.c	/^int	ft_check_format(const char *str, va_list liste, int i)$/;"	f
ft_cop	libft/conversion/ft_itoa.c	/^char	*ft_cop(char *str, int nb, int i)$/;"	f
ft_copie	libft/conversion/ft_substr.c	/^char	*ft_copie(char *dest, char *s, int i, int len)$/;"	f
ft_end	libft/check/ft_strtrim.c	/^int	ft_end(char *s1, char *set)$/;"	f
ft_inverse	libft/conversion/ft_itoa.c	/^unsigned int	ft_inverse(int n, int *p)$/;"	f
ft_isalnum	libft/check/ft_isalnum.c	/^int	ft_isalnum(int a)$/;"	f
ft_isalpha	libft/check/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/check/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/check/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/check/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/conversion/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/chained_list/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **alst, t_list *new)$/;"	f
ft_lstadd_front	libft/chained_list/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **alst, t_list *new)$/;"	f
ft_lstclear	libft/chained_list/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft/chained_list/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	libft/chained_list/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/chained_list/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/chained_list/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/chained_list/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/chained_list/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/memory/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/memory/ft_memcmp.c	/^int	ft_memcmp( const void *str, const void *str2, size_t size )$/;"	f
ft_memcpy	libft/memory/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t size )$/;"	f
ft_memmove	libft/memory/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	libft/memory/ft_memset.c	/^void	*ft_memset(void *str, int c, size_t n)$/;"	f
ft_print	libft/printf/ft_hexa.c	/^int	ft_print(unsigned long nb, char *dest, char *alphabet, int i)$/;"	f
ft_printf	libft/printf/ft_printf.c	/^int	ft_printf(const char *str, ...)$/;"	f
ft_printf_fd	libft/printf/ft_printf_fd.c	/^int	ft_printf_fd(int fd, const char *str, ...)$/;"	f
ft_putchar	libft/printf/utils.c	/^int	ft_putchar(int c)$/;"	f
ft_putchar_fd	libft/verbose/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/verbose/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_puthexa_long	libft/printf/ft_hexa.c	/^int	ft_puthexa_long(unsigned long nb)$/;"	f
ft_puthexa_max	libft/printf/ft_hexa.c	/^int	ft_puthexa_max(unsigned int nb)$/;"	f
ft_puthexa_min	libft/printf/ft_hexa.c	/^int	ft_puthexa_min(unsigned int nb)$/;"	f
ft_putnbr	libft/printf/utils.c	/^int	ft_putnbr(int n)$/;"	f
ft_putnbr_fd	libft/verbose/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/printf/utils.c	/^int	ft_putstr(char *str)$/;"	f
ft_putstr_fd	libft/verbose/ft_putstr_fd.c	/^void	ft_putstr_fd(char *str, int fd)$/;"	f
ft_putunbr	libft/printf/utils.c	/^int	ft_putunbr(unsigned int nb)$/;"	f
ft_sep	libft/conversion/ft_split.c	/^char	**ft_sep(char *str, char **dest, char sep, int count)$/;"	f
ft_separation	libft/get_next_line/get_next_line.c	/^char	*ft_separation(char **statik, int retour)$/;"	f
ft_split	libft/conversion/ft_split.c	/^char	**ft_split(char const *str, char sep)$/;"	f
ft_start	libft/check/ft_strtrim.c	/^int	ft_start(char *s1, char *set)$/;"	f
ft_strchr	libft/check/ft_strchr.c	/^char	*ft_strchr(const char *str, int c)$/;"	f
ft_strdup	libft/conversion/ft_strdup.c	/^char	*ft_strdup(const char *src)$/;"	f
ft_striteri	libft/conversion/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/conversion/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin_char	libft/conversion/ft_strjoin.c	/^char	*ft_strjoin_char(char *s1, char *s2, char c)$/;"	f
ft_strjoin_free_all	libft/conversion/ft_strjoin.c	/^char	*ft_strjoin_free_all(char *s1, char *s2)$/;"	f
ft_strjoin_free_first	libft/conversion/ft_strjoin.c	/^char	*ft_strjoin_free_first(char *s1, char *s2)$/;"	f
ft_strjoin_free_second	libft/conversion/ft_strjoin.c	/^char	*ft_strjoin_free_second(char *s1, char *s2)$/;"	f
ft_strlcat	libft/check/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft/conversion/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *src, size_t n)$/;"	f
ft_strlen	libft/check/ft_strlen.c	/^int	ft_strlen(const char *str)$/;"	f
ft_strmapi	libft/conversion/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/check/ft_strncmp.c	/^int	ft_strncmp(const char *first, const char *second, size_t size)$/;"	f
ft_strnstr	libft/check/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f
ft_strrchr	libft/check/ft_strrchr.c	/^char	*ft_strrchr( const char *str, int find)$/;"	f
ft_strtrim	libft/check/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/conversion/ft_substr.c	/^char	*ft_substr(char *str, int start, int len)$/;"	f
ft_tolower	libft/conversion/ft_tolower.c	/^int	ft_tolower(int ch)$/;"	f
ft_toupper	libft/conversion/ft_toupper.c	/^int	ft_toupper(int ch)$/;"	f
ft_wordcompt	libft/conversion/ft_split.c	/^int	ft_wordcompt(char *str, char sep)$/;"	f
g_env	main.c	/^t_env	*g_env;$/;"	v
get_arg_variables_value	processing/variable_value.c	/^void	get_arg_variables_value(t_env *env)$/;"	f
get_class	parsing/casting.c	/^void	*get_class(t_token *token)$/;"	f
get_cmd_args	get/get_arg.c	/^char	**get_cmd_args(t_cmd *cmd)$/;"	f
get_cmd_flags	get/get_arg.c	/^t_arg	*get_cmd_flags(t_cmd *cmd)$/;"	f
get_cmd_path	get/get_cmd.c	/^char	*get_cmd_path(t_cmd *cmd)$/;"	f
get_content_double	parsing/quote_detection.c	/^char	*get_content_double(char *line, int start, int *index)$/;"	f
get_current_path	get/get_path.c	/^char	*get_current_path(void)$/;"	f
get_env_bins	get/get_env.c	/^char	**get_env_bins(t_env *env)$/;"	f
get_env_var_size	get/get.c	/^int	get_env_var_size(t_env *env)$/;"	f
get_env_var_value_with_name	get/get.c	/^char	*get_env_var_value_with_name(t_env *env, char *name)$/;"	f
get_env_var_with_name	get/get.c	/^t_var	*get_env_var_with_name(t_env *env, char *name)$/;"	f
get_env_variable_value	env/variable.c	/^char	*get_env_variable_value(char *variable)$/;"	f
get_env_variables	get/get_env.c	/^char	**get_env_variables(t_env *env)$/;"	f
get_export_variable_name	env/variable.c	/^char	*get_export_variable_name(char *variable)$/;"	f
get_first_arg	get/get_arg.c	/^t_arg	*get_first_arg(t_cmd *cmd)$/;"	f
get_first_cmd	get/get_token.c	/^t_cmd	*get_first_cmd(t_env *env)$/;"	f
get_first_env_var	get/get.c	/^t_var	*get_first_env_var(t_env *env)$/;"	f
get_first_line	get/get_env.c	/^t_line	*get_first_line(t_env *env)$/;"	f
get_first_redirection	get/get_redirection.c	/^t_redir	*get_first_redirection(t_env *env)$/;"	f
get_first_token	get/get_token.c	/^t_token	*get_first_token(t_env *env)$/;"	f
get_first_token_bin	get/get_cmd.c	/^t_token	*get_first_token_bin(t_env *env)$/;"	f
get_first_token_built_in	get/get_cmd.c	/^t_token	*get_first_token_built_in(t_env *env)$/;"	f
get_first_token_cmd	get/get_cmd.c	/^t_token	*get_first_token_cmd(t_env *env)$/;"	f
get_first_token_redirection	get/get_redirection.c	/^t_token	*get_first_token_redirection(t_env *env)$/;"	f
get_home_path	get/get_path.c	/^char	*get_home_path(t_env *env)$/;"	f
get_last_env_var	get/get.c	/^t_var	*get_last_env_var(t_env *env)$/;"	f
get_last_path	get/get_path.c	/^char	*get_last_path(t_env *env)$/;"	f
get_last_status	execution/status.c	/^int	get_last_status(int bin_status, int ret_built_in)$/;"	f
get_line	env/read_line.c	/^char	*get_line(void)$/;"	f
get_list_of_bins	execution/access.c	/^char	**get_list_of_bins(t_env *env)$/;"	f
get_nbr_pipes	get/get_redirection.c	/^int	get_nbr_pipes(t_env *env)$/;"	f
get_next_cmd	get/get_next.c	/^t_cmd	*get_next_cmd(t_token *token)$/;"	f
get_next_line	libft/get_next_line/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
get_next_token_bin	get/get_next.c	/^t_token	*get_next_token_bin(t_token *token)$/;"	f
get_next_token_built_in	get/get_next.c	/^t_token	*get_next_token_built_in(t_token *token)$/;"	f
get_next_token_cmd	get/get_next.c	/^t_token	*get_next_token_cmd(t_token *token)$/;"	f
get_next_token_file	get/get_next.c	/^t_file	*get_next_token_file(t_token *token)$/;"	f
get_next_token_redirection	get/get_redirection.c	/^t_token	*get_next_token_redirection(t_token *token)$/;"	f
get_number_args	get/get_arg.c	/^int	get_number_args(t_cmd *cmd)$/;"	f
get_prev_cmd	get/get_cmd.c	/^t_cmd	*get_prev_cmd(t_token *token)$/;"	f
get_rest_single_quote	parsing/quote_detection.c	/^char	*get_rest_single_quote(char *line, int start, int end, char *quote)$/;"	f
get_variable_name	env/variable.c	/^char	*get_variable_name(char *variable)$/;"	f
have_token	is/have.c	/^int	have_token(t_env *env)$/;"	f
have_token_redirection	is/have.c	/^int	have_token_redirection(t_env *env)$/;"	f
heredoc_not_finish	redirection/heredoc.c	/^char	*heredoc_not_finish(char *limiter)$/;"	f
heredoc_prompt	redirection/heredoc.c	/^char	*heredoc_prompt(char *limiter)$/;"	f
id	header/class.h	/^	int				id;$/;"	m	struct:s_arg
id	header/class.h	/^	int				id;$/;"	m	struct:s_blank
id	header/class.h	/^	int				id;$/;"	m	struct:s_token
id	header/class.h	/^	int				id;$/;"	m	struct:s_var
id	header/class.h	/^	int				id;$/;"	m	struct:s_word
id	header/class.h	/^	int		id;$/;"	m	struct:s_cmd
index	header/class.h	/^	int				index;$/;"	m	struct:s_arg
index	header/class.h	/^	int				index;$/;"	m	struct:s_line
index	header/class.h	/^	int				index;$/;"	m	struct:s_token
index	header/class.h	/^	int				index;$/;"	m	struct:s_var
index_diff	libft/check/same_str.c	/^int	index_diff(char *first, char *second, int size)$/;"	f
index_is_over_flow	is/is_finish.c	/^int	index_is_over_flow(char *line, int index)$/;"	f
index_newline	libft/get_next_line/get_next_line.c	/^int	index_newline(char *buf)$/;"	f
index_not_over_flow	is/is_finish.c	/^int	index_not_over_flow(char *line, int index)$/;"	f
init_arg	init/init_token.c	/^t_arg	*init_arg(char *content, int id)$/;"	f
init_blank	init/init_token.c	/^t_blank	*init_blank(char *content, int id)$/;"	f
init_cmd	init/init_token.c	/^t_cmd	*init_cmd(char *content, int id)$/;"	f
init_env	init/init_env.c	/^t_env	*init_env(char **env_variable)$/;"	f
init_env_variable	init/init_env.c	/^t_var	*init_env_variable(char *name, char *value, int id)$/;"	f
init_file	init/init_env.c	/^t_file	*init_file(char *name, int fd)$/;"	f
init_heredoc	init/init_redirect.c	/^t_redir	*init_heredoc(int type, char *content, char *limiter)$/;"	f
init_line	env/line.c	/^t_line	*init_line(char *content)$/;"	f
init_redirection	init/init_redirect.c	/^t_redir	*init_redirection(int type, char *content)$/;"	f
init_token	init/init_token.c	/^t_token	*init_token(void)$/;"	f
init_word	init/init_token.c	/^t_word	*init_word(char *content, int id)$/;"	f
is_after_heredoc	is/is_file.c	/^int	is_after_heredoc(char *line, int index)$/;"	f
is_after_redirect	is/is_file.c	/^int	is_after_redirect(char *line, int index)$/;"	f
is_append_chevrons	is/is_basic_redirection.c	/^int	is_append_chevrons(char *line, int i)$/;"	f
is_arg_blank	is/is_arg.c	/^int	is_arg_blank(t_arg *arg)$/;"	f
is_arg_flags	is/is_arg.c	/^int	is_arg_flags(t_arg *arg)$/;"	f
is_arg_variable	is/is_arg.c	/^int	is_arg_variable(t_arg *arg)$/;"	f
is_argument	is/is_cmd_arg.c	/^int	is_argument(char *line, int i)$/;"	f
is_argument_separator	is/is_separator.c	/^int	is_argument_separator(t_env *env, char *line, int index)$/;"	f
is_back_slash	is/is.c	/^int	is_back_slash(char c)$/;"	f
is_bin	is/is_cmd.c	/^int	is_bin(t_env *env, char *word)$/;"	f
is_blank	is/is_blank.c	/^int	is_blank(char c)$/;"	f
is_blank_argument	is/is_blank.c	/^int	is_blank_argument(t_env *env, char *line, int index)$/;"	f
is_blank_before_finish	is/is_blank.c	/^int	is_blank_before_finish(char *line, int index)$/;"	f
is_blank_before_redirection	is/is_blank.c	/^int	is_blank_before_redirection(char *line, int index)$/;"	f
is_built_in	is/is_cmd.c	/^int	is_built_in(char *content)$/;"	f
is_cd	is/is_built_in.c	/^int	is_cd(t_cmd *cmd)$/;"	f
is_cmd	is/is_cmd.c	/^int	is_cmd(t_env *env, char *word)$/;"	f
is_cmd_bin	is/is_token_cmd.c	/^int	is_cmd_bin(t_cmd *cmd)$/;"	f
is_cmd_built_in	is/is_token_cmd.c	/^int	is_cmd_built_in(t_cmd *cmd)$/;"	f
is_delimiter	is/is_separator.c	/^int	is_delimiter(t_env *env, char *line, int index)$/;"	f
is_dollar_word	is/is_line.c	/^int	is_dollar_word(t_env *env, char *line, int i)$/;"	f
is_double_quote	is/is_quote.c	/^int	is_double_quote(char c)$/;"	f
is_echo	is/is_built_in.c	/^int	is_echo(t_cmd *cmd)$/;"	f
is_env	is/is_built_in.c	/^int	is_env(t_cmd *cmd)$/;"	f
is_exit	is/is_cmd.c	/^int	is_exit(t_cmd *cmd)$/;"	f
is_export	is/is_built_in.c	/^int	is_export(t_cmd *cmd)$/;"	f
is_file	is/is_file.c	/^int	is_file(char *line, int i)$/;"	f
is_file_redirection	is/is_redirection.c	/^int	is_file_redirection(char *line, int i)$/;"	f
is_finish	is/is_finish.c	/^int	is_finish(char c)$/;"	f
is_flags	is/is_cmd_arg.c	/^int	is_flags(char *line, int i)$/;"	f
is_heredoc	is/is_basic_redirection.c	/^int	is_heredoc(char *line, int i)$/;"	f
is_input_chevrons	is/is_basic_redirection.c	/^int	is_input_chevrons(char *line, int i)$/;"	f
is_limiter	is/is_file.c	/^int	is_limiter(char *line, int i)$/;"	f
is_not_finish	is/is_finish.c	/^int	is_not_finish(char c)$/;"	f
is_not_null	is/is.c	/^int	is_not_null(char c, char d)$/;"	f
is_not_standard_fd	is/is_fd.c	/^int	is_not_standard_fd(int fd)$/;"	f
is_null	is/is.c	/^int	is_null(char *line)$/;"	f
is_output_chevrons	is/is_basic_redirection.c	/^int	is_output_chevrons(char *line, int i)$/;"	f
is_pipe	is/is_redirection.c	/^int	is_pipe(char *line, int i)$/;"	f
is_pwd	is/is_built_in.c	/^int	is_pwd(t_cmd *cmd)$/;"	f
is_quote	is/is_quote.c	/^int	is_quote(char c)$/;"	f
is_redir_heredoc	is/is_token.c	/^int	is_redir_heredoc(t_redir *redir)$/;"	f
is_redirection	is/is_redirection.c	/^int	is_redirection(char *line, int i)$/;"	f
is_separator	is/is_separator.c	/^int	is_separator(char *line, int i)$/;"	f
is_single_quote	is/is_quote.c	/^int	is_single_quote(char c)$/;"	f
is_standard_fd	is/is_fd.c	/^int	is_standard_fd(int fd)$/;"	f
is_token_append_chevron	is/is_token_redirection.c	/^int	is_token_append_chevron(t_token *token)$/;"	f
is_token_basic_redirection	is/is_token.c	/^int	is_token_basic_redirection(t_token *token)$/;"	f
is_token_bin	is/is_token_cmd.c	/^int	is_token_bin(t_token *token)$/;"	f
is_token_built_in	is/is_token_cmd.c	/^int	is_token_built_in(t_token *token)$/;"	f
is_token_cmd	is/is_token_cmd.c	/^int	is_token_cmd(t_token *token)$/;"	f
is_token_file	is/is_token.c	/^int	is_token_file(t_token *token)$/;"	f
is_token_heredoc	is/is_token_redirection.c	/^int	is_token_heredoc(t_token *token)$/;"	f
is_token_input_chevron	is/is_token_redirection.c	/^int	is_token_input_chevron(t_token *token)$/;"	f
is_token_output_chevron	is/is_token.c	/^int	is_token_output_chevron(t_token *token)$/;"	f
is_token_pipe	is/is_token_redirection.c	/^int	is_token_pipe(t_token *token)$/;"	f
is_token_redirection	is/is_token_redirection.c	/^int	is_token_redirection(t_token *token)$/;"	f
is_token_word	is/is_token.c	/^int	is_token_word(t_token *token)$/;"	f
is_unset	is/is_cmd.c	/^int	is_unset(t_cmd *cmd)$/;"	f
is_valide_variable	is/is_variable.c	/^int	is_valide_variable(t_env *env, char *word)$/;"	f
is_value_null	is/is.c	/^int	is_value_null(char *value)$/;"	f
is_variable	is/is_variable.c	/^int	is_variable(t_env *env, char *line, int i)$/;"	f
is_variable_delimiter	is/is_separator.c	/^int	is_variable_delimiter(char *line, int index)$/;"	f
is_variable_word	is/is_variable.c	/^int	is_variable_word(char *line, int i)$/;"	f
is_word	is/is.c	/^int	is_word(t_env *env, char *line, int i)$/;"	f
is_word_argument_separator	is/is_separator.c	/^int	is_word_argument_separator(t_env *env, char *line, int index)$/;"	f
len_array	libft/array/array.c	/^int	len_array(char **array)$/;"	f
limiter	header/class.h	/^	char	*limiter;$/;"	m	struct:s_redir
limiter_detection	parsing/redirection_detection.c	/^int	limiter_detection(char *line, int index)$/;"	f
limiter_extraction	detection/extraction.c	/^int	limiter_extraction(t_redir *redir, char *line, int index)$/;"	f
line_is_empty	is/is_line.c	/^int	line_is_empty(char	*line)$/;"	f
line_is_finish	is/is_line.c	/^int	line_is_finish(char *line, int index)$/;"	f
line_is_not_empty	is/is_line.c	/^int	line_is_not_empty(char	*line)$/;"	f
line_is_not_finish	is/is_line.c	/^int	line_is_not_finish(char *line, int index)$/;"	f
main	main.c	/^int	main(int argc, char **argv, char **env_var)$/;"	f
malloc_strcpy	libft/free/copy.c	/^char	*malloc_strcpy(char *origin)$/;"	f
malloc_strcpy_after_index	libft/free/copy.c	/^char	*malloc_strcpy_after_index(char *origin, int index)$/;"	f
malloc_strcpy_array	libft/free/copy_array.c	/^char	**malloc_strcpy_array(char **origin)$/;"	f
malloc_strcpy_index	libft/free/copy.c	/^char	*malloc_strcpy_index(char *origin, int len)$/;"	f
malloc_substrcpy	libft/free/copy.c	/^char	*malloc_substrcpy(char *origin, int start, int end)$/;"	f
manage_fd_basic_redirection	redirection/manage_redirection.c	/^void	manage_fd_basic_redirection(t_token *token)$/;"	f
manage_fd_for_redirection	redirection/manage_redirection.c	/^void	manage_fd_for_redirection(t_token *token)$/;"	f
manage_fd_heredoc	redirection/manage_redirection.c	/^void	manage_fd_heredoc(t_token *token)$/;"	f
manage_fd_pipe	redirection/manage_redirection.c	/^void	manage_fd_pipe(t_token *token)$/;"	f
mini_get_next_line	libft/get_next_line/get_next_line.c	/^char	*mini_get_next_line(int fd)$/;"	f
name	header/class.h	/^	char			*name;$/;"	m	struct:s_var
name	header/class.h	/^	char	*name;$/;"	m	struct:s_file
next	header/class.h	/^	struct s_arg	*next;$/;"	m	struct:s_arg	typeref:struct:s_arg::s_arg
next	header/class.h	/^	struct s_line	*next;$/;"	m	struct:s_line	typeref:struct:s_line::s_line
next	header/class.h	/^	struct s_token	*next;$/;"	m	struct:s_token	typeref:struct:s_token::s_token
next	header/class.h	/^	struct s_var	*next;$/;"	m	struct:s_var	typeref:struct:s_var::s_var
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next_file_tokenizer	tokenization/tokenizer.c	/^int	next_file_tokenizer(t_env *env, char *line, int index)$/;"	f
open_next_file_with_flags	redirection/manage_redirection.c	/^void	open_next_file_with_flags(t_token *token, t_file *file)$/;"	f
parse_line_with_semicolon	env/read_line.c	/^void	parse_line_with_semicolon(t_env *env, char *line)$/;"	f
parsing	parsing/parsing.c	/^void	parsing(t_env *env, char *line)$/;"	f
pass	env/signal.c	/^void	pass(int key)$/;"	f
pid	header/class.h	/^	int		pid;$/;"	m	struct:s_cmd
prev	header/class.h	/^	struct s_arg	*prev;$/;"	m	struct:s_arg	typeref:struct:s_arg::s_arg
prev	header/class.h	/^	struct s_line	*prev;$/;"	m	struct:s_line	typeref:struct:s_line::s_line
prev	header/class.h	/^	struct s_token	*prev;$/;"	m	struct:s_token	typeref:struct:s_token::s_token
prev	header/class.h	/^	struct s_var	*prev;$/;"	m	struct:s_var	typeref:struct:s_var::s_var
print_all_cmd_info	verbose/verbose_cmd.c	/^void	print_all_cmd_info(t_env *env)$/;"	f
print_all_env_export_var	verbose/verbose_env_var.c	/^void	print_all_env_export_var(t_env *env)$/;"	f
print_all_env_export_var_fd	verbose/verbose_env_var_fd.c	/^void	print_all_env_export_var_fd(t_env *env, int fd)$/;"	f
print_all_env_var	verbose/verbose_env_var.c	/^void	print_all_env_var(t_env *env)$/;"	f
print_all_env_var_fd	verbose/verbose_env_var_fd.c	/^void	print_all_env_var_fd(t_env *env, int fd)$/;"	f
print_all_line	verbose/verbose_env.c	/^void	print_all_line(t_env *env)$/;"	f
print_all_redirect_info	verbose/verbose_redirect.c	/^void	print_all_redirect_info(t_env *env)$/;"	f
print_append_chevron	verbose/verbose_basic_redirect.c	/^void	print_append_chevron(t_redir *redir, t_cmd *prev_cmd, t_file *next_file)$/;"	f
print_args	verbose/verbose_class.c	/^void	print_args(t_cmd *cmd)$/;"	f
print_args_array	verbose/verbose_class.c	/^void	print_args_array(char **args)$/;"	f
print_array	libft/verbose/print_array.c	/^void	print_array(char **str)$/;"	f
print_array_back_slash	libft/verbose/print_array.c	/^void	print_array_back_slash(char **str)$/;"	f
print_array_fd	libft/verbose/print_array.c	/^void	print_array_fd(char **str, int fd)$/;"	f
print_array_index	libft/verbose/print_array.c	/^void	print_array_index(char **str, int index)$/;"	f
print_chained_list	verbose/verbose_token.c	/^void	print_chained_list(t_env *env)$/;"	f
print_cmd	verbose/verbose_class.c	/^void	print_cmd(t_cmd *cmd, int index)$/;"	f
print_cmd_info	verbose/verbose_cmd.c	/^void	print_cmd_info(t_cmd *cmd)$/;"	f
print_env_var	verbose/verbose_env_var.c	/^void	print_env_var(t_var *var)$/;"	f
print_env_var_fd	verbose/verbose_env_var_fd.c	/^void	print_env_var_fd(t_var *var, int fd)$/;"	f
print_heredoc_info	verbose/verbose_basic_redirect.c	/^void	print_heredoc_info(t_redir *redir, t_cmd *prev_cmd)$/;"	f
print_input_chevron	verbose/verbose_basic_redirect.c	/^void	print_input_chevron(t_redir *redir, t_cmd *prev_cmd, t_file *next_file)$/;"	f
print_line	verbose/verbose_env.c	/^void	print_line(t_line *line)$/;"	f
print_output_chevron	verbose/verbose_basic_redirect.c	/^void	print_output_chevron(t_redir *redir, t_cmd *prev_cmd,$/;"	f
print_pipe_info	verbose/verbose_redirect.c	/^void	print_pipe_info(t_redir *redir, t_cmd *prev_cmd, t_cmd *next_cmd)$/;"	f
print_redirect	verbose/verbose_redirect.c	/^void	print_redirect(t_token *token, t_cmd *prev_cmd,$/;"	f
print_redirection	verbose/verbose_class.c	/^void	print_redirection(t_token *token, t_redir *redir)$/;"	f
print_str_index	libft/verbose/print_array.c	/^void	print_str_index(char *str, int i)$/;"	f
print_token	verbose/verbose_token.c	/^void	print_token(t_token *token)$/;"	f
processing_bin	processing/processing_cmd.c	/^void	processing_bin(t_env *env)$/;"	f
processing_built_in	processing/processing_built.c	/^void	processing_built_in(t_env *env)$/;"	f
processing_cd	processing/processing_built.c	/^void	processing_cd(t_env *env, t_cmd *cmd)$/;"	f
processing_cmd	processing/processing_cmd.c	/^void	processing_cmd(t_env *env)$/;"	f
processing_cmd_args	processing/processing_cmd.c	/^void	processing_cmd_args(t_env *env)$/;"	f
processing_echo	processing/processing_built.c	/^void	processing_echo(t_cmd *cmd)$/;"	f
processing_exit	processing/processing_built.c	/^void	processing_exit(t_cmd *cmd)$/;"	f
processing_redirection	processing/processing_redirection.c	/^void	processing_redirection(t_env *env)$/;"	f
prompt	env/prompt.c	/^void	prompt(t_env	*env)$/;"	f
pwd	built_in/built_in.c	/^int	pwd(t_cmd *cmd)$/;"	f
read_and_extract_content_file	redirection/heredoc.c	/^char	*read_and_extract_content_file(char *path)$/;"	f
redirect_cmd	processing/processing_redirection.c	/^void	redirect_cmd(t_cmd *cmd)$/;"	f
redirection_classification	detection/classification.c	/^int	redirection_classification(t_env *env, char *line, int index)$/;"	f
redirection_detection	parsing/redirection_detection.c	/^int	redirection_detection(char *line, int index)$/;"	f
remove_all	exit_free/remove.c	/^void	remove_all(t_env *env)$/;"	f
remove_all_arg	exit_free/remove_arg.c	/^void	remove_all_arg(t_cmd *cmd)$/;"	f
remove_all_line	exit_free/remove.c	/^void	remove_all_line(t_env *env)$/;"	f
remove_all_token	exit_free/remove_token.c	/^void	remove_all_token(t_env *env)$/;"	f
remove_and_disconect_env_var	exit_free/remove_token_type.c	/^void	remove_and_disconect_env_var(t_env *env, t_var *var)$/;"	f
remove_arg	exit_free/remove_arg.c	/^void	remove_arg(t_arg *arg)$/;"	f
remove_arg_in_cmd	exit_free/remove_arg.c	/^void	remove_arg_in_cmd(t_cmd *cmd, t_arg *arg)$/;"	f
remove_arg_index	exit_free/remove_arg.c	/^void	remove_arg_index(t_cmd *cmd, t_arg *arg)$/;"	f
remove_blank_arg	concatenate/concatenate.c	/^void	remove_blank_arg(t_cmd *cmd)$/;"	f
remove_env_var	exit_free/remove.c	/^void	remove_env_var(t_var *var)$/;"	f
remove_env_vars	exit_free/remove_arg.c	/^void	remove_env_vars(t_env *env)$/;"	f
remove_line	exit_free/remove.c	/^void	remove_line(t_line *line)$/;"	f
remove_tmp_file	redirection/close.c	/^void	remove_tmp_file(t_token *token_heredoc)$/;"	f
remove_token	exit_free/remove_token.c	/^void	remove_token(t_token *token)$/;"	f
remove_token_cmd	exit_free/remove_token_type.c	/^void	remove_token_cmd(t_cmd *cmd)$/;"	f
remove_token_file	exit_free/remove_token_type.c	/^void	remove_token_file(t_file *file)$/;"	f
remove_token_redir	exit_free/remove_token_type.c	/^void	remove_token_redir(t_redir *redir)$/;"	f
remove_token_word	exit_free/remove_token_type.c	/^void	remove_token_word(t_word *word)$/;"	f
remove_var_list	exit_free/remove.c	/^void	remove_var_list(t_env *env)$/;"	f
reset_counter_error	error/error_env.c	/^void	reset_counter_error(t_env *env)$/;"	f
s_arg	header/class.h	/^typedef struct s_arg$/;"	s
s_blank	header/class.h	/^typedef struct s_blank$/;"	s
s_cmd	header/class.h	/^typedef struct s_cmd$/;"	s
s_env	header/class.h	/^typedef struct s_env$/;"	s
s_file	header/class.h	/^typedef struct s_file$/;"	s
s_line	header/class.h	/^typedef struct s_line$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_redir	header/class.h	/^typedef struct s_redir$/;"	s
s_token	header/class.h	/^typedef struct s_token$/;"	s
s_var	header/class.h	/^typedef struct s_var$/;"	s
s_word	header/class.h	/^typedef struct s_word$/;"	s
same_name	is/is_same.c	/^int	same_name(char *first, char *second)$/;"	f
same_str	libft/check/same_str.c	/^int	same_str(char *first, char *second, int size)$/;"	f
same_str_index	libft/check/same_str.c	/^int	same_str_index(char *first, char *second, int size, int index)$/;"	f
setup_bin_args	processing/bin_processing.c	/^void	setup_bin_args(t_cmd *cmd, char **bins)$/;"	f
setup_bin_path	processing/bin_processing.c	/^void	setup_bin_path(t_cmd *cmd, char **bins)$/;"	f
single_quotes_detection	parsing/quote_detection.c	/^int	single_quotes_detection(char *line, int index)$/;"	f
single_tokenization	tokenization/tokenization.c	/^int	single_tokenization(t_cmd *cmd, char *line, int start, int index)$/;"	f
single_tokenizer	tokenization/quote_tokenizer.c	/^int	single_tokenizer(t_cmd *cmd, char *line, int index)$/;"	f
size_of_cmd_list	concatenate/list_to_array.c	/^int	size_of_cmd_list(t_cmd *cmd)$/;"	f
size_of_var_list	concatenate/list_to_array.c	/^int	size_of_var_list(t_env *env)$/;"	f
str_to_array	libft/array/join_array.c	/^char	**str_to_array(char *str)$/;"	f
string_extraction	detection/extraction.c	/^int	string_extraction(t_env *env, t_cmd *cmd, char *line, int index)$/;"	f
t_arg	header/class.h	/^}	t_arg;$/;"	t	typeref:struct:s_arg
t_blank	header/class.h	/^}	t_blank;$/;"	t	typeref:struct:s_blank
t_cmd	header/class.h	/^}	t_cmd;$/;"	t	typeref:struct:s_cmd
t_env	header/class.h	/^}	t_env;$/;"	t	typeref:struct:s_env
t_file	header/class.h	/^}	t_file;$/;"	t	typeref:struct:s_file
t_line	header/class.h	/^}	t_line;$/;"	t	typeref:struct:s_line
t_list	libft/libft.h	/^}t_list;$/;"	t	typeref:struct:s_list
t_redir	header/class.h	/^}	t_redir;$/;"	t	typeref:struct:s_redir
t_token	header/class.h	/^}	t_token;$/;"	t	typeref:struct:s_token
t_var	header/class.h	/^}	t_var;$/;"	t	typeref:struct:s_var
t_word	header/class.h	/^}	t_word;$/;"	t	typeref:struct:s_word
test_absolute_bin_access	execution/access.c	/^int	test_absolute_bin_access(char *path)$/;"	f
test_bin_access	execution/access.c	/^int	test_bin_access(char **bins, char *word)$/;"	f
tmp_file	header/class.h	/^	t_file	*tmp_file;$/;"	m	struct:s_redir
token_have_args	is/have.c	/^int	token_have_args(t_token *token)$/;"	f
tokenization	tokenization/tokenization.c	/^void	tokenization(t_env *env, char *line)$/;"	f
type	header/class.h	/^	int		type;$/;"	m	struct:s_redir
type_of_redirect	redirection/redirect.c	/^int	type_of_redirect(char *content)$/;"	f
unset	built_in/export.c	/^int	unset(t_cmd *cmd, t_env *env)$/;"	f
update_variable_status_process	execution/status.c	/^void	update_variable_status_process(t_env *env, int status)$/;"	f
use_signal	env/signal.c	/^void	use_signal(void)$/;"	f
value	header/class.h	/^	char			*value;$/;"	m	struct:s_var
variable_detection	detection/variable_detection.c	/^int	variable_detection(char *line, int index)$/;"	f
variable_exist	is/is_variable.c	/^int	variable_exist(t_env *env, char *name)$/;"	f
variable_list_to_array	concatenate/list_to_array.c	/^char	**variable_list_to_array(t_env *env)$/;"	f
variable_name_extraction	is/is_variable.c	/^char	*variable_name_extraction(char *line, int index)$/;"	f
variable_tokenizer	tokenization/cmd_tokenizer.c	/^int	variable_tokenizer(t_env *env, t_cmd *cmd, char *line, int index)$/;"	f
variables_tokenization	tokenization/cmd_tokenizer.c	/^int	variables_tokenization(t_env *env, t_cmd *cmd, char *line, int index)$/;"	f
verbose	header/class.h	/^	int			verbose;$/;"	m	struct:s_env
wait_all_pid	execution/execution.c	/^int	wait_all_pid(t_env *env)$/;"	f
word_arg_detection	parsing/word_detection.c	/^int	word_arg_detection(t_env *env, char *line, int index)$/;"	f
word_arg_extraction	detection/extraction.c	/^int	word_arg_extraction(t_env *env, t_cmd *cmd, char *line, int index)$/;"	f
word_arg_tokenizer	tokenization/tokenizer.c	/^void	word_arg_tokenizer(t_env *env, t_cmd *cmd, char *content)$/;"	f
word_classification	detection/classification.c	/^int	word_classification(t_env *env, char *line, int index)$/;"	f
word_detection	parsing/word_detection.c	/^int	word_detection(t_env *env, char *line, int index)$/;"	f
word_tokenizer	tokenization/tokenizer.c	/^t_token	*word_tokenizer(char *content, int id)$/;"	f
write_line	env/prompt.c	/^void	write_line(char *line, int fd)$/;"	f
