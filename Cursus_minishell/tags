!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLU	minishell.h	/^# define BLU /;"	d
BLU_2	minishell.h	/^# define BLU_2 /;"	d
BONUS	libft/Makefile	/^BONUS	= ft_lstnew.c\\$/;"	m
BONUS_OBJS	libft/Makefile	/^BONUS_OBJS	= ${BONUS:.c=.o}$/;"	m
CC	Makefile	/^CC		= gcc$/;"	m
CC	libft/Makefile	/^CC		= gcc$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS	= -Wall -Wextra -Werror$/;"	m
CYN	minishell.h	/^# define CYN /;"	d
DEPS	Makefile	/^DEPS		= ${INC_LIBFT}\/libft.h$/;"	m
GRN	minishell.h	/^# define GRN /;"	d
HEADERS	Makefile	/^HEADERS		= minishell.h$/;"	m
HEADERS	libft/Makefile	/^HEADERS	= libft.h$/;"	m
INC_LIBFT	Makefile	/^INC_LIBFT	= libft$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
MAG	minishell.h	/^# define MAG /;"	d
MINISHELL_H	minishell.h	/^# define MINISHELL_H$/;"	d
NAME	Makefile	/^NAME	= minishell$/;"	m
NAME	libft/Makefile	/^NAME	= libft.a$/;"	m
OBJS	Makefile	/^OBJS	= ${SRCS:.c=.o}$/;"	m
OBJS	libft/Makefile	/^OBJS	= ${SRCS:.c=.o}$/;"	m
READLINE	Makefile	/^READLINE	= -lreadline$/;"	m
RED	minishell.h	/^# define RED /;"	d
RESET	minishell.h	/^# define RESET /;"	d
RM	Makefile	/^RM		= rm -f$/;"	m
RM	libft/Makefile	/^RM		= rm -f$/;"	m
SRCS	Makefile	/^SRCS	= main.c\\$/;"	m
SRCS	libft/Makefile	/^SRCS	= ft_isalpha.c\\$/;"	m
WHT	minishell.h	/^# define WHT /;"	d
YEL	minishell.h	/^# define YEL /;"	d
arg	minishell.h	/^	char			**arg;$/;"	m	struct:s_cmd
argument	minishell.h	/^	char			*argument; \/\/$/;"	m	struct:s_cmd
cmd	minishell.h	/^	char			*cmd;$/;"	m	struct:s_cmd
cmd	minishell.h	/^	t_cmd	*cmd;$/;"	m	struct:s_term
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
dernier_ret	minishell.h	/^	int		dernier_ret;$/;"	m	struct:s_term
env	minishell.h	/^	t_env	*env;$/;"	m	struct:s_term
env_key	env_key.c	/^char	*env_key(char *env)$/;"	f
env_var	env_var.c	/^char	*env_var(char *env)$/;"	f
envp	minishell.h	/^	char	**envp;$/;"	m	struct:s_term
file	minishell.h	/^	char				*file;$/;"	m	struct:s_intra_red
free_all	main.c	/^int	free_all(int ret)$/;"	f
free_tab	free.c	/^void	*free_tab(void **a_free)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_check	libft/ft_strtrim.c	/^static int	ft_check(char c, const char *str)$/;"	f	file:
ft_fill_big_table	complicated_split.c	/^static char	**ft_fill_big_table(char *src, char c, char **dst, int *lens)$/;"	f	file:
ft_fill_big_table	libft/ft_split.c	/^static char	**ft_fill_big_table(char *src, char c, char **dst, int *lens)$/;"	f	file:
ft_free_split	complicated_split.c	/^static char	**ft_free_split(char **dst, size_t i)$/;"	f	file:
ft_free_split	libft/ft_split.c	/^static char	**ft_free_split(char **dst, size_t i)$/;"	f	file:
ft_is_space	libft/ft_atoi.c	/^static int	ft_is_space(char c)$/;"	f	file:
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_len_strs	complicated_split.c	/^static int	*ft_len_strs(char *str, char c, int count, int index)$/;"	f	file:
ft_len_strs	libft/ft_split.c	/^static int	*ft_len_strs(char *str, char c, int n_words)$/;"	f	file:
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f
ft_mod	libft/ft_itoa.c	/^static void	ft_mod(int n, char *result, int size)$/;"	f	file:
ft_mod	libft/ft_putnbr_fd.c	/^static void	ft_mod(int n, int fd)$/;"	f	file:
ft_n_words	complicated_split.c	/^static int	ft_n_words(char *str, char c, int count)$/;"	f	file:
ft_n_words	libft/ft_split.c	/^static int	ft_n_words(char *str, char c)$/;"	f	file:
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_size	libft/ft_itoa.c	/^static int	ft_size(int n)$/;"	f	file:
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_splitpath	complicated_split.c	/^char	**ft_splitpath(char *s, char c)$/;"	f
ft_strcat	libft/ft_strjoin.c	/^static char	*ft_strcat(char *dst, char *src)$/;"	f	file:
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcpy	libft/ft_strjoin.c	/^static char	*ft_strcpy(char *dst, char *src)$/;"	f	file:
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
g_term	main.c	/^t_term g_term;$/;"	v
handler_ctr_c	handler_ctr_c.c	/^void	handler_ctr_c(int code)$/;"	f
handler_ctr_d	handler_ctr_d.c	/^void	handler_ctr_d(int code)$/;"	f
init_struct_env	init_struc_env.c	/^int	init_struct_env(void)$/;"	f
key	minishell.h	/^	char	*key;$/;"	m	struct:str_env
launch_setup	launch_setup.c	/^int	launch_setup(int ac, char **envp)$/;"	f
main	main.c	/^int	main(int ac, char **av, char **envp)$/;"	f
nb_node	minishell.h	/^	int		nb_node;$/;"	m	struct:s_term
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	minishell.h	/^	struct s_cmd	*next;$/;"	m	struct:s_cmd	typeref:struct:s_cmd::s_cmd
parsing_av	parsing_av.c	/^int	parsing_av(char *str)$/;"	f
path	minishell.h	/^	char			*path;$/;"	m	struct:s_cmd
pid	minishell.h	/^	pid_t			pid;$/;"	m	struct:s_cmd
pip	minishell.h	/^	char			*pip;$/;"	m	struct:s_cmd
prev	minishell.h	/^	struct s_cmd	*prev;$/;"	m	struct:s_cmd	typeref:struct:s_cmd::s_cmd
red	minishell.h	/^	char				*red;$/;"	m	struct:s_intra_red
red	minishell.h	/^	t_intra_red		*red;$/;"	m	struct:s_cmd
s_cmd	minishell.h	/^typedef struct s_cmd$/;"	s
s_intra_red	minishell.h	/^typedef struct s_intra_red$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_term	minishell.h	/^typedef struct s_term$/;"	s
str_cmd	minishell.h	/^	char	*str_cmd;$/;"	m	struct:s_term
str_env	minishell.h	/^typedef struct str_env$/;"	s
t_cmd	minishell.h	/^}	t_cmd;$/;"	t	typeref:struct:s_cmd
t_env	minishell.h	/^}	t_env;$/;"	t	typeref:struct:str_env
t_intra_red	minishell.h	/^}	t_intra_red;$/;"	t	typeref:struct:s_intra_red
t_list	libft/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_term	minishell.h	/^}	t_term;$/;"	t	typeref:struct:s_term
tub	minishell.h	/^	int				tub[2];$/;"	m	struct:s_cmd
var	minishell.h	/^	char	*var;$/;"	m	struct:str_env
